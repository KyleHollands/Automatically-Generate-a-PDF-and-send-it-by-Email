#!/usr/bin/env python3

import json
import locale
import sys
import reports
# from reports import generate as report
# from emails import generate as email_generate
# from emails import send as email_send

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')

  max_revenue = {"item_revenue": 0}
  max_sales = {"item_sales": 0}
  popular_year = {"item_year": 0}

  for item in data:
    # Calculate the item_revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    
    item_revenue = item["total_sales"] * item_price
    item_sales = item["total_sales"]
    item_year = item["car"]["car_year"]

    # Calculate item with most item_revenue
    if item_revenue > max_revenue["item_revenue"]:
      item["item_revenue"] = item_revenue
      max_revenue = item

    # Calculate item with most sales
    if item_sales > max_sales["item_sales"]:
      item["item_sales"] = item_sales
      max_sales = item
    
    # Acquire the total sales of associated year.
    if item_year not in popular_year.keys():
      popular_year[item_year] = item["total_sales"]
    else:
      popular_year[item_year] += item["total_sales"]
  
  # Determine most popular year and amount sold within that year.

  all_values = popular_year.values()
  most_sold = max(all_values)
  year_most_sold = max(popular_year, key=popular_year.get)

  summary = [
    "The {} generated the most item revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["item_revenue"]),
    "The {} generated the most sales: {}".format(format_car(max_sales["car"]), max_sales["item_sales"]),
    "The most popular year was: {} with {} total sales.".format(year_most_sold, most_sold),
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data(r"C:\Users\kyleh\OneDrive\Education\Coursera\Google IT Automation with Python\Automating Real-World Tasks with Python\Week 3\Resources\Automatically Generate a PDF and send it by Email\car_sales.json")
  summary = process_data(data)
  # new_summary = '<br/>'.join(summary)
  print(summary)

  # TODO: turn this into a PDF report
  
  report = SimpleDocTemplate(r"C:\Users\kyleh\OneDrive\Education\Coursera\Google IT Automation with Python\Automating Real-World Tasks with Python\Week 3\Resources\Automatically Generate a PDF and send it by Email\Car Sales Report.pdf")
  styles = getSampleStyleSheet()

  report_title = Paragraph("Car Sales Information", styles["h1"])

  table_style = [('GRID', (0,0), (-1,-1), 0.5, colors.black)]
  new_summary = [[x] for x in summary]
  report_table = Table(new_summary, style=table_style, hAlign="LEFT")
  
  report.build([report_title, report_table])

  # report("/tmp/cars.pdf", "Cars Sales Report", new_summary, cars_dict_to_table(data))

  # TODO: send the PDF report as an email attachment
  # msg = email_generate("automation@example.com", "student-03-8c385c18c4ba@example.com",
  #                        "Sales summary for last month", new_summary, "/tmp/cars.pdf")
  # email_send(msg)

if __name__ == "__main__":
  main(sys.argv)
